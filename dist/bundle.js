!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_CONFIG={UPDATE_AFTER_X_FRAMES:40,GAME_WIDTH:15,GAME_HEIGHT:20,CANVAS_MIN_WIDTH:300,CANVAS_MIN_HEIGHT:400,CELL_SIZE:20,NEXT_SHAPE_CELL_SIZE:5,STROKE_WIDTH:.5,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],SCORE_LABEL_FONT:"10px Comic Sans MS",NEXT_SHAPE_LABEL_FONT:"10px Comic Sans MS",GAME_OVER_LABEL_FONT:"25px Comic Sans MS",GAME_OVER_YOUR_SCORE_LABEL_FONT:"15px Comic Sans MS",FONT_COLOR:"white",SCORE_LABEL:"Score: ",NEXT_SHAPE_LABEL:"Next Shape: ",GAME_OVER_LABEL:"Game Over!",GAME_OVER_YOUR_SCORE_LABEL:"Your Score: ",NEXT_SHAPE_POSITION:{X:283,Y:6},SCORE_LABEL_POSITION:{X:5,Y:13,ALIGNMENT:"left"},NEXT_SHAPE_LABEL_POSITION:{X:215,Y:13,ALIGNMENT:"left"},GAME_OVER_LABEL_POSITION:{X:150,Y:200,ALIGNMENT:"center"},GAME_OVER_YOUR_SCORE_LABEL_POSITION:{X:150,Y:235,ALIGNMENT:"center"},START_KEY:32,LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13,FILLED_LINE_BONUS:100,DROPPED_SHAPE_BONUS:2,LOWERED_SHAPE_BONUS:1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"X",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(e,"Zero",{get:function(){return new e(0,0)},enumerable:!0,configurable:!0}),e.prototype.addX=function(t){return new e(this._x,this._y).addToX(t)},e.prototype.addY=function(t){return new e(this._x,this._y).addToY(t)},e.prototype.addToX=function(e){return this._x+=e,this},e.prototype.addToY=function(e){return this._y+=e,this},e.prototype.add=function(e,t){return this.addToX(e),this.addToY(t),this},e}();t.Vector2=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),o=function(){function e(e,t){this._canvasContainer=t,this._canvas=e,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}return e.prototype.fixDPI=function(e){this._dpi=window.devicePixelRatio;var t=+getComputedStyle(this._canvas).getPropertyValue("height").slice(0,-2),n=+getComputedStyle(this._canvas).getPropertyValue("width").slice(0,-2);this._canvas.setAttribute("height",(t*this._dpi).toString()),this._canvas.setAttribute("width",(n*this._dpi).toString()),this._context.scale(this._dpi*e.X,this._dpi*e.Y)},e.prototype.resizeCanvas=function(){var e=r.GAME_CONFIG.GAME_WIDTH*r.GAME_CONFIG.CELL_SIZE,t=r.GAME_CONFIG.GAME_HEIGHT*r.GAME_CONFIG.CELL_SIZE,n=e/t,o=window.innerHeight-10>=r.GAME_CONFIG.CANVAS_MIN_HEIGHT?window.innerHeight-10:r.GAME_CONFIG.CANVAS_MIN_HEIGHT,a=window.innerWidth>=r.GAME_CONFIG.CANVAS_MIN_WIDTH?window.innerWidth:r.GAME_CONFIG.CANVAS_MIN_WIDTH;a=a/o>n?o*n:a/n,this._canvasContainer.style.width=a+"px",this._canvasContainer.style.height=o+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-20-a)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-20-a)/2+"px";var s=new i.Vector2(a/e,o/t);this._canvas.width=a,this._canvas.height=o,this.fixDPI(s)},e.prototype.clear=function(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)},e.prototype.drawBackground=function(e){this._context.save(),this._context.fillStyle=e,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._context.restore()},e.prototype.drawRect=function(e,t,n,i,o){this._context.save(),this._context.lineWidth=r.GAME_CONFIG.STROKE_WIDTH,this._context.strokeStyle=n,this._context.fillStyle=t,this._context.fillRect(e.X,e.Y,i,o),this._context.strokeRect(e.X,e.Y,i,o),this._context.restore()},e.prototype.drawText=function(e,t,n,r,i){void 0===i&&(i="left"),this._context.save(),this._context.fillStyle=n,this._context.font=t,this._context.textAlign=i,this._context.fillText(e,r.X,r.Y),this._context.restore()},e.prototype.drawRectAtCell=function(e,t,n,r,o){this.drawRect(new i.Vector2(t*o,e*o),n,r,o,o)},e}(),a=document.getElementById("screen"),s=document.getElementById("screen");t.canvas2D=new o(a,s),window.addEventListener("resize",t.canvas2D.resizeCanvas.bind(t.canvas2D))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){var e=this;this._keysPressed=[],document.addEventListener("keydown",function(t){e.keyDown(t)})}return e.prototype.keyDown=function(e){this._keysPressed[e.keyCode]=!0},e.prototype.reset=function(){this._keysPressed=[]},e.prototype.isPressed=function(e){return this._keysPressed[e]},e}();t.keyboard=new r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.I=0]="I",e[e.J=1]="J",e[e.L=2]="L",e[e.S=3]="S",e[e.Z=4]="Z",e[e.O=5]="O",e[e.T=6]="T"}(t.ShapeType||(t.ShapeType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),i=n(3),o=n(2),a=n(0);(new(function(){function e(){this.init()}return e.prototype.init=function(){this.tetris=new r.GameWorld(a.GAME_CONFIG.GAME_WIDTH,a.GAME_CONFIG.GAME_HEIGHT)},e.prototype.gameOverScreen=function(){o.canvas2D.clear(),o.canvas2D.drawBackground(a.GAME_CONFIG.BACKGROUND_COLOR),o.canvas2D.drawText(a.GAME_CONFIG.GAME_OVER_LABEL,a.GAME_CONFIG.GAME_OVER_LABEL_FONT,a.GAME_CONFIG.FONT_COLOR,a.GAME_CONFIG.GAME_OVER_LABEL_POSITION,a.GAME_CONFIG.GAME_OVER_LABEL_POSITION.ALIGNMENT),o.canvas2D.drawText(a.GAME_CONFIG.GAME_OVER_YOUR_SCORE_LABEL+this.tetris.score,a.GAME_CONFIG.GAME_OVER_YOUR_SCORE_LABEL_FONT,a.GAME_CONFIG.FONT_COLOR,a.GAME_CONFIG.GAME_OVER_YOUR_SCORE_LABEL_POSITION,a.GAME_CONFIG.GAME_OVER_LABELTetris_POSITION.ALIGNMENT),i.keyboard.isPressed(a.GAME_CONFIG.START_KEY)&&this.tetris.init()},e.prototype.update=function(){this.tetris.update()},e.prototype.draw=function(){o.canvas2D.clear(),o.canvas2D.drawBackground(a.GAME_CONFIG.BACKGROUND_COLOR),this.tetris.draw()},e.prototype.start=function(){var e=this;this.tetris.gameOver?this.gameOverScreen():(this.update(),this.draw()),i.keyboard.reset(),requestAnimationFrame(function(){return e.start()})},e}())).start()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(3),o=n(1),a=n(2),s=n(4),_=n(7),c=n(9),h=function(){function e(e,t){this._movingShape=null,this._shapesQueue=[],this._shapeTypes=[s.ShapeType.I,s.ShapeType.J,s.ShapeType.L,s.ShapeType.O,s.ShapeType.S,s.ShapeType.Z,s.ShapeType.T],this._shapeFactory=new c.ShapeFactory,this._map=new _.GameMap(e,t),this.init()}return Object.defineProperty(e.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"score",{get:function(){return this._score},enumerable:!0,configurable:!0}),e.prototype.increaseScore=function(e){this._score+=e},e.prototype.dropShape=function(){for(var e=0;!this.lowerShape();)e++;return e},e.prototype.handleInput=function(){var e=this,t=0;if(i.keyboard.isPressed(r.GAME_CONFIG.DROP)){var n=this.dropShape();this.increaseScore(n*r.GAME_CONFIG.DROPPED_SHAPE_BONUS)}else i.keyboard.isPressed(r.GAME_CONFIG.UP_KEY)?this.rotateShape():i.keyboard.isPressed(r.GAME_CONFIG.DOWN_KEY)?(this.lowerShape(),this.increaseScore(r.GAME_CONFIG.LOWERED_SHAPE_BONUS)):i.keyboard.isPressed(r.GAME_CONFIG.LEFT_KEY)?t=-1:i.keyboard.isPressed(r.GAME_CONFIG.RIGHT_KEY)&&(t=1);0!==t&&(this._movingShape.cells.some(function(n){var r=n.X+t,i=e._movingShape.isPartOfShape(n.addX(t));return r<0||r===e._map.width||e._map.isCellFilled(r,n.Y)&&!i})||(this._map.clearShape(this._movingShape),this._movingShape.move(t,0),this._map.colorShape(this._movingShape)))},e.prototype.rotateShape=function(){var e=this;if(this._movingShape.origin){for(var t=[],n=0,r=this._movingShape.cells;n<r.length;n++){var i=r[n],o=i.X-this._movingShape.origin.X,a=-(i.Y-this._movingShape.origin.Y),s=o,_=this._movingShape.origin.addX(a).addY(s);t.push(_)}t.every(function(t){var n=e._movingShape.isPartOfShape(t);return e._map.isInMap(t.X,t.Y)&&(!e._map.isCellFilled(t.X,t.Y)||n)})&&(this._map.clearShape(this._movingShape),this._movingShape.cells=t,this._map.colorShape(this._movingShape))}},e.prototype.lowerShape=function(){var e=this,t=this._movingShape.cells.some(function(t){var n=t.Y+1,r=e._movingShape.isPartOfShape(t.addY(1));return n===e._map.height||e._map.isCellFilled(t.X,n)&&!r});return t||(this._map.clearShape(this._movingShape),this._movingShape.move(0,1),this._map.colorShape(this._movingShape)),t},e.prototype.handleFilledLines=function(){var e=this._map.removeFilledLines();e>0&&(this.increaseScore(e*r.GAME_CONFIG.FILLED_LINE_BONUS),this._updateEveryXFrames>0&&this._updateEveryXFrames--)},e.prototype.checkForGameOver=function(){return this._map.anyFilledOnRow(0)},e.prototype.generateRandomShape=function(){var e=Math.floor(Math.random()*this._shapeTypes.length),t=r.GAME_CONFIG.SHAPE_COLORS[e];return this._shapeFactory.createShape(this._shapeTypes[e],new o.Vector2(Math.floor(this._map.width/2),-3),t)},e.prototype.drawShapesInQueue=function(){a.canvas2D.drawText(r.GAME_CONFIG.NEXT_SHAPE_LABEL,r.GAME_CONFIG.NEXT_SHAPE_LABEL_FONT,r.GAME_CONFIG.FONT_COLOR,r.GAME_CONFIG.NEXT_SHAPE_LABEL_POSITION,r.GAME_CONFIG.NEXT_SHAPE_LABEL_POSITION.ALIGNMENT);for(var e=function(e){var n=t._shapesQueue[e],i=t._shapesQueue.length-1-e,s=t._shapeFactory.createShape(n.shapeType,new o.Vector2(r.GAME_CONFIG.NEXT_SHAPE_POSITION.X+4*i*r.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE,r.GAME_CONFIG.NEXT_SHAPE_POSITION.Y),n.color,r.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE);s.cells.forEach(function(e){return a.canvas2D.drawRect(e,s.color,r.GAME_CONFIG.STROKE_COLOR,r.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE,r.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE)})},t=this,n=this._shapesQueue.length-1;n>=0;n--)e(n)},e.prototype.drawScore=function(){a.canvas2D.drawText(r.GAME_CONFIG.SCORE_LABEL+this._score.toString(),r.GAME_CONFIG.SCORE_LABEL_FONT,r.GAME_CONFIG.FONT_COLOR,r.GAME_CONFIG.SCORE_LABEL_POSITION,r.GAME_CONFIG.SCORE_LABEL_POSITION.ALIGNMENT)},e.prototype.init=function(){this._gameOver=!1,this._score=0,this._frame=0,this._updateEveryXFrames=r.GAME_CONFIG.UPDATE_AFTER_X_FRAMES,this._map.init();var e=this.generateRandomShape();this._shapesQueue=[e],this._movingShape=this.generateRandomShape()},e.prototype.update=function(){if((this.handleInput(),!(++this._frame%this._updateEveryXFrames))&&(this.lowerShape()&&(this.handleFilledLines(),this._gameOver=this.checkForGameOver(),!this._gameOver))){var e=this.generateRandomShape();this._shapesQueue.unshift(e),this._movingShape=this._shapesQueue.pop()}},e.prototype.draw=function(){this._map.draw(),this.drawScore(),this.drawShapesInQueue()},e}();t.GameWorld=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8),i=n(2),o=n(0),a=function(){function e(e,t){this._map=[],this._width=e,this._height=t}return Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),e.prototype.init=function(){for(var e=0;e<this._height;e++){this._map[e]=[];for(var t=0;t<this._width;t++)this._map[e][t]=new r.Cell}},e.prototype.isInMap=function(e,t){return e>=0&&e<this._width&&t>=0&&t<this._height},e.prototype.isCellFilled=function(e,t){return this.isInMap(e,t)&&this._map[t][e].filled},e.prototype.clearCell=function(e,t){this.isInMap(e,t)&&(this._map[t][e].filled=!1)},e.prototype.clearShape=function(e){var t=this;e.cells.forEach(function(e){t.clearCell(e.X,e.Y)})},e.prototype.colorCell=function(e,t,n){this.isInMap(e,t)&&(this._map[t][e].filled=!0,this._map[t][e].color=n)},e.prototype.colorShape=function(e){var t=this;e.cells.forEach(function(n){t.colorCell(n.X,n.Y,e.color)})},e.prototype.anyFilledOnRow=function(e){return this._map[e].some(function(e){return e.filled})},e.prototype.removeFilledLines=function(){for(var e=0,t=0;t<this._map.length;t++){if(this._map[t].every(function(e){return e.filled})){e++,this._map.splice(t,1);for(var n=[],i=0;i<this._width;i++)n[i]=new r.Cell;this._map.unshift(n)}}return e},e.prototype.draw=function(){for(var e=0;e<this._map.length;e++)for(var t=0;t<this._map[e].length;t++){var n=this._map[e][t];n.filled&&i.canvas2D.drawRectAtCell(e,t,n.color,o.GAME_CONFIG.STROKE_COLOR,o.GAME_CONFIG.CELL_SIZE)}},e}();t.GameMap=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this._filled=!1}return Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filled",{get:function(){return this._filled},set:function(e){this._filled=e},enumerable:!0,configurable:!0}),e}();t.Cell=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(1),o=n(10),a=function(){function e(){}return e.prototype.createShape=function(e,t,n,a){void 0===a&&(a=1);var s,_=[];switch(e){case r.ShapeType.I:_=[new i.Vector2(t.X,t.Y-1*a),new i.Vector2(t.X,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X,t.Y+2*a)],s=new i.Vector2(t.X,t.Y);break;case r.ShapeType.J:_=[new i.Vector2(t.X,t.Y-1*a),new i.Vector2(t.X,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X-1*a,t.Y+1*a)],s=new i.Vector2(t.X,t.Y);break;case r.ShapeType.L:_=[new i.Vector2(t.X,t.Y-1*a),new i.Vector2(t.X,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X+1*a,t.Y+1*a)],s=new i.Vector2(t.X,t.Y);break;case r.ShapeType.O:_=[new i.Vector2(t.X-1*a,t.Y),new i.Vector2(t.X,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X-1*a,t.Y+1*a)],s=null;break;case r.ShapeType.S:_=[new i.Vector2(t.X,t.Y),new i.Vector2(t.X+1*a,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X-1*a,t.Y+1*a)],s=new i.Vector2(t.X,t.Y+1*a);break;case r.ShapeType.Z:_=[new i.Vector2(t.X,t.Y),new i.Vector2(t.X-1*a,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X+1*a,t.Y+1*a)],s=new i.Vector2(t.X,t.Y+1*a);break;case r.ShapeType.T:_=[new i.Vector2(t.X,t.Y),new i.Vector2(t.X,t.Y+1*a),new i.Vector2(t.X-1*a,t.Y+1*a),new i.Vector2(t.X+1*a,t.Y+1*a)],s=new i.Vector2(t.X,t.Y+1*a)}return new o.Shape(e,_,s,n)},e}();t.ShapeFactory=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n,r){this._cells=[],this._color="",this._origin=null,this._shapeType=e,this._cells=t,this._color=r,this._origin=n}return Object.defineProperty(e.prototype,"shapeType",{get:function(){return this._shapeType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cells",{get:function(){return this._cells},set:function(e){this._cells=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"origin",{get:function(){return this._origin},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},enumerable:!0,configurable:!0}),e.prototype.isPartOfShape=function(e){return this._cells.some(function(t){return t.X===e.X&&t.Y===e.Y})},e.prototype.move=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this._origin&&this._origin.addToX(e).addToY(t),this.cells.forEach(function(n){return n.addToX(e).addToY(t)})},e}();t.Shape=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,